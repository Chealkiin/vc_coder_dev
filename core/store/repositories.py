"""Repository interfaces used by the agent orchestrator."""

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Mapping, Sequence, TYPE_CHECKING

if TYPE_CHECKING:  # pragma: no cover - import time dependency guard
    from backend.agents.orchestrator.orchestrator_state import RunState, StepState


class RunRepo(ABC):
    """Persistence abstraction for run level metadata."""

    @abstractmethod
    def create_run(
        self,
        repo: str,
        base_ref: str,
        steps: Sequence[Mapping[str, object]],
        config: Mapping[str, object] | None = None,
    ) -> str:
        """Create a run and return its identifier."""

    @abstractmethod
    def get_run(self, run_id: str) -> Mapping[str, object] | None:
        """Retrieve a run snapshot."""

    @abstractmethod
    def update_run_state(self, run_id: str, state: "RunState") -> None:
        """Persist the new run state."""


class StepRepo(ABC):
    """Persistence abstraction for step level metadata."""

    @abstractmethod
    def create_steps(self, run_id: str, steps: Sequence[Mapping[str, object]]) -> None:
        """Persist the initial step descriptors for a run."""

    @abstractmethod
    def get_step(self, run_id: str, index: int) -> Mapping[str, object] | None:
        """Return the stored representation of the step."""

    @abstractmethod
    def update_step_state(self, run_id: str, index: int, state: "StepState") -> None:
        """Persist the latest state for the step."""

    @abstractmethod
    def list_steps(self, run_id: str) -> Sequence[Mapping[str, object]]:
        """List all steps for a run preserving execution order."""


class ArtifactRepo(ABC):
    """Persistence abstraction for artifacts emitted during a run."""

    @abstractmethod
    def record_artifact(
        self,
        run_id: str,
        step_id: str,
        artifact: Mapping[str, object],
    ) -> None:
        """Persist an artifact produced by a step."""


class ValidationReportRepo(ABC):
    """Persistence abstraction for validation reports."""

    @abstractmethod
    def record_report(
        self,
        run_id: str,
        step_id: str,
        report: Mapping[str, object],
    ) -> None:
        """Persist validation results generated by the validator pipeline."""


class PRBindingRepo(ABC):
    """Persistence abstraction for PR related metadata."""

    @abstractmethod
    def upsert_binding(self, run_id: str, metadata: Mapping[str, object]) -> None:
        """Persist PR binding metadata for a run."""

